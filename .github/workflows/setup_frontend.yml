name: Tokenkit Frontend Setup

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install SSH Client
        run: sudo apt-get install -y sshpass

      - name: Transfer files to Contabo
        uses: appleboy/scp-action@v0.1.6
        with:
          host: ${{ secrets.CONTABO_HOST }}
          username: root
          key: ${{ secrets.CONTABO_SSH_KEY }}
          source: "."
          target: "/home/tokenkit_frontend/"

      - name: Setup Frontend
        env:
          VPS_PASSWORD: ${{ secrets.CONTABO_PASSWORD }}
        run: |
          sshpass -p "$VPS_PASSWORD" ssh -o StrictHostKeyChecking=no root@${{ secrets.CONTABO_HOST }} << 'EOF'
          
            # Set environment variables directly in the SSH session
            export FRONTEND_IDENTIFIER="tokenkit_frontend"
            export SERVER_NAME="tokenkithq.io"
            export APP_USER="tokenkit"
            export APP_GROUP="tokenkit"
            export PM2_APP_NAME="tokenkit-frontend"
          
            # Navigate to the frontend directory
            cd /home/"$FRONTEND_IDENTIFIER" || exit

            # Create a dedicated user for running the services if it doesn't exist
            if ! id -u "$APP_USER" &>/dev/null; then
              echo "Creating dedicated service user: $APP_USER"
              useradd -m -s /bin/bash "$APP_USER"
              # Add user to necessary groups
              usermod -aG www-data "$APP_USER"
            fi

            # Install Node.js if not already installed
            if ! command -v node &> /dev/null; then
              echo "Installing Node.js..."
              curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
              apt-get install -y nodejs
            fi

            # Install PM2 if not already installed
            if ! command -v pm2 &> /dev/null; then
              echo "Installing PM2..."
              npm install -g pm2
            fi

            # Install dependencies and build the application
            cd /home/"$FRONTEND_IDENTIFIER"
            npm install
            npm run build

            # Ensure proper ownership of the application directory
            chown -R "$APP_USER":"$APP_GROUP" /home/"$FRONTEND_IDENTIFIER"

            # Create application log directory with proper permissions
            mkdir -p /var/log/"$FRONTEND_IDENTIFIER"
            chown -R "$APP_USER":"$APP_GROUP" /var/log/"$FRONTEND_IDENTIFIER"

            # Create PM2 ecosystem file
            echo '{
              "apps": [
                {
                  "name": "'$PM2_APP_NAME'",
                  "script": "npm",
                  "args": "start",
                  "cwd": "/home/'$FRONTEND_IDENTIFIER'/",
                  "env": {
                    "NODE_ENV": "production",
                    "PORT": "3000"
                  },
                  "user": "'$APP_USER'",
                  "log_date_format": "YYYY-MM-DD HH:mm:ss Z",
                  "error_file": "/var/log/'$FRONTEND_IDENTIFIER'/error.log",
                  "out_file": "/var/log/'$FRONTEND_IDENTIFIER'/output.log",
                  "max_memory_restart": "1G",
                  "instances": 1,
                  "exec_mode": "fork"
                }
              ]
            }' | sudo tee /home/"$FRONTEND_IDENTIFIER"/ecosystem.config.json

            # Install Caddy if not already installed
            if ! command -v caddy &> /dev/null; then
              echo "Installing Caddy..."
              apt-get update
              apt-get install -y debian-keyring debian-archive-keyring apt-transport-https curl
              curl -1sLf 'https://dl.cloudsmith.io/public/caddy/stable/gpg.key' | gpg --dearmor -o /usr/share/keyrings/caddy-stable-archive-keyring.gpg
              curl -1sLf 'https://dl.cloudsmith.io/public/caddy/stable/debian.deb.txt' | tee /etc/apt/sources.list.d/caddy-stable.list
              apt-get update
              apt-get install -y caddy
            fi

            # Configure Caddy systemd service for automatic HTTPS if not already exists
            if [ ! -f /etc/systemd/system/caddy.service ]; then
              echo "[Unit]
              Description=Caddy
              Documentation=https://caddyserver.com/docs/
              After=network.target network-online.target
              Requires=network-online.target
  
              [Service]
              Type=notify
              User=root
              Group=root
              ExecStart=/usr/bin/caddy run --config /home/tokenkit/caddy.json --environ
              TimeoutStopSec=5s
              LimitNOFILE=1048576
              LimitNPROC=512
              PrivateTmp=true
              ProtectSystem=full
              AmbientCapabilities=CAP_NET_BIND_SERVICE
              Environment=\"CADDY_ADMIN=0.0.0.0:15000\"
              StandardOutput=file:/var/log/caddy/caddy.log
              StandardError=file:/var/log/caddy/caddy-error.log
  
              [Install]
              WantedBy=multi-user.target" | sudo tee /etc/systemd/system/caddy.service
            fi

            # Start the application with PM2
            cd /home/"$FRONTEND_IDENTIFIER"
            sudo -u "$APP_USER" pm2 start ecosystem.config.json
            
            # Save PM2 process list and configure to start on reboot
            sudo -u "$APP_USER" pm2 save
            sudo env PATH=$PATH:/usr/bin pm2 startup systemd -u "$APP_USER" --hp /home/"$APP_USER"
            sudo systemctl enable pm2-"$APP_USER"
            
            # Enable and reload Caddy service
            sudo systemctl daemon-reload
            sudo systemctl enable caddy
            sudo systemctl restart caddy
            
            # Set up log rotation for application logs
            echo "/var/log/$FRONTEND_IDENTIFIER/*.log {
                daily
                missingok
                rotate 14
                compress
                delaycompress
                notifempty
                create 0640 $APP_USER $APP_GROUP
                sharedscripts
                postrotate
                    sudo -u $APP_USER pm2 reload all >/dev/null 2>&1 || true
                endscript
            }" | sudo tee /etc/logrotate.d/"$FRONTEND_IDENTIFIER"
            
            # Set up log rotation for Caddy logs if not already exists
            if [ ! -f /etc/logrotate.d/caddy ]; then
              echo "/var/log/caddy/*.log {
                  daily
                  missingok
                  rotate 14
                  compress
                  delaycompress
                  notifempty
                  create 0640 root root
                  sharedscripts
                  postrotate
                      systemctl reload caddy.service >/dev/null 2>&1 || true
                  endscript
              }" | sudo tee /etc/logrotate.d/caddy
            fi
            
            # Create a simple health check script
            echo '#!/bin/bash
            
            # Health check for Tokenkit Frontend service
            
            check_pm2_app() {
                if sudo -u "'$APP_USER'" pm2 show "$1" | grep -q "online"; then
                    echo "✅ $1 is running"
                    return 0
                else
                    echo "❌ $1 is not running"
                    return 1
                fi
            }
            
            # Check all services
            STATUS=0
            
            check_pm2_app "'$PM2_APP_NAME'" || STATUS=1
            
            # Check if Caddy is running
            if systemctl is-active --quiet caddy; then
                echo "✅ caddy is running"
            else
                echo "❌ caddy is not running"
                STATUS=1
            fi
            
            # Check if the application is responding
            if curl -s --head --request GET http://localhost:3000/ | grep "200 OK" > /dev/null; then
                echo "✅ Application health check passed"
            else
                echo "❌ Application health check failed"
                STATUS=1
            fi
            
            exit $STATUS' | sudo tee /usr/local/bin/tokenkit-frontend-health-check
            
            sudo chmod +x /usr/local/bin/tokenkit-frontend-health-check
            
            echo "Setup complete! Frontend service is installed and configured."
            exit 0  # Exit from SSH session
          EOF